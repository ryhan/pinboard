// Generated by CoffeeScript 1.6.1
var Pinboard;

Pinboard = (function() {
  var MIN_HEIGHT, MIN_NUM_ZOOM, MIN_WIDTH;

  MIN_WIDTH = 300;

  MIN_HEIGHT = 200;

  MIN_NUM_ZOOM = 2;

  function Pinboard(pins) {
    this.pins = pins;
    this.html = $("<div class='pinboard' />");
  }

  Pinboard.prototype.update = function() {
    var _this = this;
    this._fill();
    $(window).resize(function() {
      return _this._fill();
    });
    return $.map(this.pins, function(pin) {
      return _this.html.append(pin.html);
    });
  };

  Pinboard.prototype._fill = function() {
    var grid;
    console.log("filling");
    grid = this._determine_unit_size();
    this._adjust_pin_sizes(grid);
    this._allocate(grid);
    return console.log("done filling");
  };

  Pinboard.prototype._determine_unit_size = function() {
    var height, number_to_zoom, unit_height, unit_horiz_count, unit_vert_count, unit_width, width;
    number_to_zoom = MIN_NUM_ZOOM;
    width = this.html.width();
    height = this.html.height();
    unit_horiz_count = Math.floor(width / MIN_WIDTH);
    unit_vert_count = Math.floor(height / MIN_HEIGHT);
    unit_width = parseInt(width / unit_horiz_count);
    unit_height = parseInt(height / unit_vert_count);
    return {
      number_to_zoom: number_to_zoom,
      unit_width: unit_width,
      unit_height: unit_height,
      unit_horiz_count: unit_horiz_count,
      unit_vert_count: unit_vert_count,
      width: width,
      height: height
    };
  };

  Pinboard.prototype._adjust_pin_sizes = function(grid) {
    var _this = this;
    this.pins = _.shuffle(this.pins);
    $.map(this.pins, function(pin, i) {
      if (i < grid.number_to_zoom) {
        pin.zoom = true;
        return pin.html.css({
          'height': "" + (2 * grid.unit_height) + "px",
          'width': "" + (2 * grid.unit_width) + "px"
        });
      } else {
        pin.zoom = false;
        return pin.html.css({
          'height': "" + grid.unit_height + "px",
          'width': "" + grid.unit_width + "px"
        });
      }
    });
    return this.pins = _.shuffle(this.pins);
  };

  Pinboard.prototype._allocate = function(grid) {
    var allocated_units, c, columns, find_empty_double, find_empty_spot, last_point, matrix, place_single, place_zoomed, r, row, rows, _i, _j;
    columns = grid.unit_horiz_count;
    rows = grid.unit_vert_count;
    matrix = [];
    for (r = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; r = 1 <= rows ? ++_i : --_i) {
      row = [];
      for (c = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; c = 1 <= columns ? ++_j : --_j) {
        row.push(0);
      }
      matrix.push(row);
    }
    allocated_units = 0;
    place_single = function(pin) {
      var point;
      if (allocated_units >= columns * rows) {
        return false;
      }
      if (pin.zoom) {
        return false;
      }
      point = find_empty_spot();
      if (point.y < 0) {
        pin.html.css('opacity', '0');
        return false;
      }
      matrix[point.y][point.x] = 1;
      allocated_units += 1;
      pin.html.css({
        'opacity': '1',
        'top': "" + (point.y * grid.unit_height) + "px",
        'left': "" + (point.x * grid.unit_width) + "px"
      });
      return true;
    };
    place_zoomed = function(pin) {
      var point;
      if (allocated_units >= columns * rows || !pin.zoom) {
        pin.html.css('opacity', '0');
        return false;
      }
      point = find_empty_double();
      if (point.y < 0) {
        pin.html.css('opacity', '0');
        return false;
      }
      matrix[point.y][point.x] = 1;
      matrix[point.y + 1][point.x] = 1;
      matrix[point.y][point.x + 1] = 1;
      matrix[point.y + 1][point.x + 1] = 1;
      allocated_units += 4;
      pin.html.css({
        'opacity': '1',
        'top': "" + (point.y * grid.unit_height) + "px",
        'left': "" + (point.x * grid.unit_width) + "px"
      });
      return true;
    };
    last_point = {
      x: 0,
      y: 0
    };
    find_empty_spot = function() {
      var _k, _l, _ref, _ref1, _ref2;
      for (r = _k = _ref = last_point.y, _ref1 = rows - 1; _ref <= _ref1 ? _k <= _ref1 : _k >= _ref1; r = _ref <= _ref1 ? ++_k : --_k) {
        for (c = _l = 0, _ref2 = columns - 1; 0 <= _ref2 ? _l <= _ref2 : _l >= _ref2; c = 0 <= _ref2 ? ++_l : --_l) {
          if (!matrix[r][c]) {
            last_point = {
              x: c,
              y: r
            };
            return {
              x: c,
              y: r
            };
          }
        }
      }
      return {
        x: -1,
        y: -1
      };
    };
    find_empty_double = function() {
      var last_row, skip, _k, _l, _ref, _ref1;
      skip = Math.floor(Math.random() * 3);
      for (r = _k = 0, _ref = rows - 2; 0 <= _ref ? _k <= _ref : _k >= _ref; r = 0 <= _ref ? ++_k : --_k) {
        for (c = _l = 0, _ref1 = columns - 2; 0 <= _ref1 ? _l <= _ref1 : _l >= _ref1; c = 0 <= _ref1 ? ++_l : --_l) {
          if (r * columns + c > skip) {
            if (!matrix[r][c] && !matrix[r][c + 1] && !matrix[r + 1][c + 1] && !matrix[r + 1][c]) {
              last_row = r + 1;
              return {
                x: c,
                y: r
              };
            }
          }
        }
      }
      return {
        x: -1,
        y: -1
      };
    };
    $.map(this.pins, place_zoomed);
    return $.map(this.pins, place_single);
  };

  return Pinboard;

})();
